@page "/product/{Id:int}"
@using Product.Blazor.Services
@using Microsoft.JSInterop

@inject ProductApiService ProductApi
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i> @errorMessage
                    <div class="mt-2">
                        <button class="btn btn-success" @onclick="GoBack">
                            <i class="fas fa-arrow-left"></i> Back to Products
                        </button>
                    </div>
                </div>
            }
            else if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="min-height: 300px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-3">Loading product details...</span>
                </div>
            }
            else if (product != null)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-4">
                                    <h6 class="text-muted mb-2">Product Name</h6>
                                    <p class="fs-5 fw-medium">@product.Name</p>
                                </div>
                                
                                <div class="mb-4">
                                    <h6 class="text-muted mb-2">Price</h6>
                                    <p class="fs-4 fw-bold text-success">@product.Price.ToString("C")</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-4">
                                    <h6 class="text-muted mb-2">Description</h6>
                                    @if (string.IsNullOrWhiteSpace(product.Description))
                                    {
                                        <p class="text-muted fst-italic">No description provided</p>
                                    }
                                    else
                                    {
                                        <p class="text-break">@product.Description</p>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <hr />
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex gap-2">
                                <button class="btn btn-success" @onclick="EditProduct">
                                    <i class="fas fa-edit"></i> Edit Product
                                </button>
                                <button class="btn btn-danger" @onclick="DeleteProduct">
                                    <i class="fas fa-trash"></i> Delete Product
                                </button>
                            </div>
                            <small class="text-muted">
                                Product #@product.Id
                            </small>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private Models.Product? product;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        isLoading = true;
        errorMessage = null;

        var result = await ProductApi.GetProductAsync(Id);
        
        if (result.IsSuccess)
        {
            product = result.Data;
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "Failed to load product details.";
        }
        
        isLoading = false;
        StateHasChanged();
    }

    private void EditProduct()
    {
        NavigationManager.NavigateTo($"/editproduct/{Id}");
    }

    private async Task DeleteProduct()
    {
        if (product == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to delete '{product.Name}'?\n\nThis action cannot be undone.");
        
        if (!confirmed) return;

        var result = await ProductApi.DeleteProductAsync(Id);
        
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/products");
        }
        else
        {
            errorMessage = result.ErrorMessage;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }
} 